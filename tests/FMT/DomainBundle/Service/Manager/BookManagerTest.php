<?php

namespace Tests\FMT\DomainBundle\Service\Manager;

use FMT\DataBundle\Entity\CampaignBook;
use FMT\DataBundle\Entity\UserMajor;
use FMT\DomainBundle\Event\BookEvent;
use FMT\DomainBundle\Service\BookManagerInterface;
use FMT\DomainBundle\Service\Manager\BookManager;
use FMT\DomainBundle\Service\Mapper\Campaign\Book\CourseMapper;
use FMT\DomainBundle\Service\Mapper\Campaign\Book\FamilyMapper;
use FMT\DomainBundle\Service\Mapper\Campaign\Book\SectionMapper;
use FMT\DomainBundle\Type\Cache\Settings;
use FMT\InfrastructureBundle\Helper\DataHelper;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Client;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Campus as NebookCampus;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Course as NebookCourse;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Material as NebookMaterial;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Product as NebookProduct;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\ProductFamily as NebookFamily;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Section as NebookSection;
use FMT\InfrastructureBundle\Service\Nebook\RestApi\Item\Term as NebookTerm;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Tests\FMT\DomainBundle\AbstractTest;

/**
 * Class BookManagerTest
 * @package Tests\FMT\DomainBundle\Service\Manager
 */
class BookManagerTest extends AbstractTest
{
    /** @var Settings */
    private $settings;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->settings = new Settings();
        $this->settings->nebookCatalogTimeout = 0;
    }

    /**
     * @dataProvider updateDataProvider
     * @param CampaignBook $book
     * @param NebookFamily $family
     */
    public function testUpdate(CampaignBook $book, NebookFamily $family)
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('productFamilyGetById')
            ->with($this->equalTo($family->getId()))
            ->willReturn($family);

        $service = new BookManager($client, $this->settings);
        $result = $service->update($book);

        $this->assertTrue($result);
    }

    /**
     * @return array
     */
    public function updateDataProvider()
    {
        $result = [];

        $familyId = 123;
        $sku = 456;

        // 1.
        $book = $this->createMock(CampaignBook::class);
        $book
            ->expects($this->once())
            ->method('getProductFamilyId')
            ->willReturn($familyId);
        $book
            ->expects($this->never())
            ->method('getSku')
            ->willReturn($sku);


        $family = new NebookFamily;
        $resultWrapper = new DataHelper($family);
        $resultWrapper->id = $familyId;
        $resultWrapper->products = [];

        $result[] = [
            'book' => $book,
            'family' => $family,
        ];


        // 2.
        $book = $this->createMock(CampaignBook::class);
        $book
            ->expects($this->once())
            ->method('getProductFamilyId')
            ->willReturn($familyId);
        $book
            ->expects($this->exactly(3))
            ->method('getSku')
            ->willReturn($sku);

        $products[] = $this->createMock(NebookProduct::class);
        $products[] = $this->createMock(NebookProduct::class);
        $products[] = $this->createMock(NebookProduct::class);

        $family = new NebookFamily;
        $resultWrapper = new DataHelper($family);
        $resultWrapper->id = $familyId;
        $resultWrapper->products = $products;

        $result[] = [
            'book' => $book,
            'family' => $family,
        ];

        return $result;
    }


    /**
     * @expectedException \Exception
     */
    public function testUpdateWithException()
    {
        $book = new CampaignBook();
        $book->setIsbn(1234567890);

        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('productFamilyGetById')
            ->will($this->throwException(new \Exception()));

        $dispatcher = $this->getDispatcher($book);

        $service = new BookManager($client, $this->settings);
        $service->setEventDispatcher($dispatcher);
        $service->update($book);
    }


    /**
     * @dataProvider getNextSectionTypeDataProvider
     * @param $type
     * @param $expectedType
     */
    public function testGetNextSectionType($type, $expectedType)
    {
        $result = BookManager::getNextSectionType($type);

        $this->assertEquals($result, $expectedType);
    }

    /**
     * @return array
     */
    public function getNextSectionTypeDataProvider()
    {
        return [
            [
                'type' => BookManager::SECTION_CAMPUSES,
                'expected' => BookManager::SECTION_TERMS,
            ],
            [
                'type' => BookManager::SECTION_TERMS,
                'expected' => BookManager::SECTION_DEPARTMENTS,
            ],
            [
                'type' => BookManager::SECTION_DEPARTMENTS,
                'expected' => BookManager::SECTION_COURSES,
            ],
            [
                'type' => BookManager::SECTION_COURSES,
                'expected' => BookManager::SECTION_SECTIONS,
            ],
            [
                'type' => BookManager::SECTION_SECTIONS,
                'expected' => BookManager::SECTION_PRODUCTS,
            ],
            [
                'type' => BookManager::SECTION_PRODUCTS,
                'expected' => null,
            ],
        ];
    }


    /**
     * @dataProvider getPreviousSectionTypeDataProvider
     * @param $type
     * @param $expectedType
     */
    public function testGetPreviousSectionType($type, $expectedType)
    {
        $result = BookManager::getPreviousSectionType($type);

        $this->assertEquals($result, $expectedType);
    }

    /**
     * @return array
     */
    public function getPreviousSectionTypeDataProvider()
    {
        return [
            [
                'type' => BookManager::SECTION_CAMPUSES,
                'expected' => null,
            ],
            [
                'type' => BookManager::SECTION_TERMS,
                'expected' => BookManager::SECTION_CAMPUSES,
            ],
            [
                'type' => BookManager::SECTION_DEPARTMENTS,
                'expected' => BookManager::SECTION_TERMS,
            ],
            [
                'type' => BookManager::SECTION_COURSES,
                'expected' => BookManager::SECTION_DEPARTMENTS,
            ],
            [
                'type' => BookManager::SECTION_SECTIONS,
                'expected' => BookManager::SECTION_COURSES,
            ],
            [
                'type' => BookManager::SECTION_PRODUCTS,
                'expected' => BookManager::SECTION_SECTIONS,
            ],
        ];
    }


    /**
     * @dataProvider getByTypeDataProvider
     * @param BookManager $service
     * @param $type
     * @param $id
     */
    public function testGetByType(BookManager $service, $type, $id)
    {
        $result = $service->getByType($type, $id);

        $this->assertTrue($result);
    }

    /**
     * @return array
     */
    public function getByTypeDataProvider()
    {
        $result = [];

        $id = 1;


        // 1.
        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(1);
        $major->setDepartmentId(2);

        $type = 'courses';

        $service = $this->getMockBuilder(BookManager::class)
            ->disableOriginalConstructor()
            ->setMethods(['getCourses'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getCourses')
            ->with($this->equalTo($major))
            ->willReturn(true);

        $result[] = [
            'service' => $service,
            'type' => $type,
            'id' => $major,
        ];


        // 2.
        $type = 'sections';
        $service = $this->getMockBuilder(BookManager::class)
            ->disableOriginalConstructor()
            ->setMethods(['getSections'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getSections')
            ->with($this->equalTo($id))
            ->willReturn(true);

        $result[] = [
            'service' => $service,
            'type' => $type,
            'id' => $id,
        ];


        // 3.
        $type = 'products';
        $service = $this->getMockBuilder(BookManager::class)
            ->disableOriginalConstructor()
            ->setMethods(['getProducts'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getProducts')
            ->with($this->equalTo($id))
            ->willReturn(true);

        $result[] = [
            'service' => $service,
            'type' => $type,
            'id' => $id,
        ];


        return $result;
    }


    /**
     * @dataProvider getByTypeWithExceptionDataProvider
     * @expectedException \Exception
     * @param $type
     * @param $id
     */
    public function testGetByTypeWithException($type, $id)
    {
        /** @var BookManager $service */
        $service = $this->container->get(BookManager::class);
        $service->getByType($type, $id);
    }

    /**
     * @return array
     */
    public function getByTypeWithExceptionDataProvider()
    {
        $id = 1;

        return [
            [
                'type' => '',
                'id' => $id,
            ],
            [
                'type' => 'test',
                'id' => $id,
            ],
        ];
    }


    /**
     * @dataProvider getTermDataProvider
     * @param UserMajor $major
     * @param array $terms
     * @param NebookTerm|null $expectedResult
     */
    public function testGetTerm(UserMajor $major, array $terms, NebookTerm $expectedResult = null)
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('termsGetOpened')
            ->willReturn($terms);

        $service = new BookManager($client, $this->settings);
        $result = $service->getTerm($major);

        $this->assertEquals($result, $expectedResult);
    }

    /**
     * @return array
     */
    public function getTermDataProvider()
    {
        $result = [];

        $campus1 = new NebookCampus;
        $resultWrapper = new DataHelper($campus1);
        $resultWrapper->id = 1;

        $term1 = new NebookTerm;
        $resultWrapper = new DataHelper($term1);
        $resultWrapper->id = 1;
        $resultWrapper->campus = $campus1;


        $campus2 = new NebookCampus;
        $resultWrapper = new DataHelper($campus2);
        $resultWrapper->id = 2;

        $term2 = new NebookTerm;
        $resultWrapper = new DataHelper($term2);
        $resultWrapper->id = 2;
        $resultWrapper->campus = $campus2;


        $terms = [$term1, $term2];


        // 1.
        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(1);
        $major->setDepartmentId(2);

        $result[] = [
            'major' => $major,
            'terms' => $terms,
            'expectedResult' => $term1,
        ];


        // 2.
        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(2);
        $major->setDepartmentId(4);

        $result[] = [
            'major' => $major,
            'terms' => $terms,
            'expectedResult' => $term2,
        ];


        // 3.
        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(3);
        $major->setDepartmentId(6);

        $result[] = [
            'major' => $major,
            'terms' => $terms,
            'expectedResult' => null,
        ];

        return $result;
    }


    /**
     * @expectedException \Exception
     */
    public function testGetTermWithException()
    {
        $major = new UserMajor();
        $major->setName('Test name');

        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('termsGetOpened')
            ->will($this->throwException(new \Exception()));

        $service = new BookManager($client, $this->settings);
        $service->getTerm($major);
    }


    /**
     * @dataProvider getCoursesDataProvider
     * @param NebookTerm|null $term
     * @param UserMajor $major
     * @param NebookCourse[] $courses
     */
    public function testGetCourses(NebookTerm $term = null, UserMajor $major, array $courses)
    {
        $client = $this->createMock(Client::class);
        if ($term) {
            $client
                ->expects($this->once())
                ->method('coursesGetByDepartmentIdAndTermId')
                ->with($this->equalTo($major->getDepartmentId()), $this->equalTo($term->getId()))
                ->willReturn($courses);
        }

        $service = $this->getMockBuilder(BookManager::class)
            ->setConstructorArgs([$client, $this->settings])
            ->setMethods(['getTerm'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getTerm')
            ->with($this->equalTo($major))
            ->willReturn($term);

        /** @var BookManager $service */
        $result = $service->getCourses($major);

        $expectedResult = [];
        foreach ($courses as $course) {
            $expectedResult[] = CourseMapper::map($course);
        }

        $this->assertEquals($result, $expectedResult);
    }

    /**
     * @return array
     */
    public function getCoursesDataProvider()
    {
        $term = new NebookTerm;
        $resultWrapper = new DataHelper($term);
        $resultWrapper->id = 2;

        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(3);
        $major->setDepartmentId(4);

        $course = new NebookCourse();
        $resultWrapper = new DataHelper($course);
        $resultWrapper->id = 5;
        $resultWrapper->realName = 'realName';
        $resultWrapper->name = 'name';

        return [
            [
                'term' => $term,
                'major' => $major,
                'course' => [$course],
            ],
            [
                'term' => $term,
                'major' => $major,
                'course' => [],
            ],
            [
                'term' => null,
                'major' => $major,
                'course' => [],
            ],
        ];
    }


    /**
     * @expectedException \Exception
     */
    public function testGetCoursesWithException()
    {
        $term = new NebookTerm;
        $resultWrapper = new DataHelper($term);
        $resultWrapper->id = 2;

        $major = new UserMajor();
        $major->setName('Test name');

        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('coursesGetByDepartmentIdAndTermId')
            ->will($this->throwException(new \Exception()));

        $service = $this->getMockBuilder(BookManager::class)
            ->setConstructorArgs([$client, $this->settings])
            ->setMethods(['getTerm'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getTerm')
            ->willReturn($term);

        /** @var BookManager $service */
        $service->getCourses($major);
    }


    /**
     * @dataProvider getSectionsDataProvider
     * @param $id
     * @param NebookSection[] $sections
     */
    public function testGetSections($id, array $sections)
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('sectionsGetByCourseId')
            ->with($this->equalTo($id))
            ->willReturn($sections);

        $service = new BookManager($client, $this->settings);

        $result = $service->getSections($id);

        $expectedResult = [];
        foreach ($sections as $section) {
            $expectedResult[] = SectionMapper::map($section);
        }

        $this->assertEquals($result, $expectedResult);
    }

    /**
     * @return array
     */
    public function getSectionsDataProvider()
    {
        $id = 1;

        $section = new NebookSection();
        $resultWrapper = new DataHelper($section);
        $resultWrapper->id = 2;
        $resultWrapper->name = 'name';

        return [
            [
                'id' => $id,
                'sections' => [$section],
            ],
            [
                'id' => $id,
                'sections' => [],
            ],
        ];
    }


    /**
     * @expectedException \Exception
     */
    public function testGetSectionsWithException()
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('sectionsGetByCourseId')
            ->will($this->throwException(new \Exception()));

        $service = new BookManager($client, $this->settings);
        $service->getSections(1);
    }


    /**
     * @dataProvider getProductsDataProvider
     * @param $id
     * @param NebookMaterial $material
     */
    public function testGetProducts($id, NebookMaterial $material)
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('courseMaterialsGetBySectionId')
            ->with($this->equalTo($id))
            ->willReturn([$material]);

        $service = new BookManager($client, $this->settings);

        $result = $service->getProducts($id);
        $expectedResult = FamilyMapper::map($material->getFamily());

        $this->assertEquals($result, $expectedResult);
    }

    /**
     * @return array
     */
    public function getProductsDataProvider()
    {
        $result = [];

        $id = 1;

        // 1.
        $family = $this->getFamily();

        $material = new NebookMaterial();
        $resultWrapper = new DataHelper($material);
        $resultWrapper->family = $family;

        $result[] = [
            'id' => $id,
            'material' => $material,
        ];


        // 2.
        $family = $this->getFamily(false);

        $material = new NebookMaterial();
        $resultWrapper = new DataHelper($material);
        $resultWrapper->family = $family;

        $result[] = [
            'id' => $id,
            'material' => $material,
        ];

        return $result;
    }


    /**
     * @expectedException \Exception
     */
    public function testGetProductsWithException()
    {
        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('courseMaterialsGetBySectionId')
            ->will($this->throwException(new \Exception()));

        $service = new BookManager($client, $this->settings);
        $service->getProducts(1);
    }


    /**
     * @dataProvider getProductsByIsbnDataProvider
     * @param $isbn
     * @param NebookTerm|null $term
     * @param UserMajor $major
     * @param NebookFamily $family
     */
    public function testGetProductsByIsbn($isbn, NebookTerm $term = null, UserMajor $major, NebookFamily $family)
    {
        $client = $this->createMock(Client::class);
        if ($term) {
            $client
                ->expects($this->once())
                ->method('productFamilyGetByIsbn')
                ->with($this->equalTo($isbn), $this->equalTo($term->getId()))
                ->willReturn($family);
        }

        $service = $this->getMockBuilder(BookManager::class)
            ->setConstructorArgs([$client, $this->settings])
            ->setMethods(['getTerm'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getTerm')
            ->with($this->equalTo($major))
            ->willReturn($term);


        /** @var BookManagerInterface $service */
        $result = $service->getProductsByIsbn($isbn, $major);
        $expectedResult = FamilyMapper::map($family);

        $this->assertEquals($result, $expectedResult);
    }

    /**
     * @return array
     */
    public function getProductsByIsbnDataProvider()
    {
        $term = new NebookTerm;
        $resultWrapper = new DataHelper($term);
        $resultWrapper->id = 2;

        $major = new UserMajor();
        $major->setName('Test name');
        $major->setCampusId(3);
        $major->setDepartmentId(4);

        return [
            [
                'isbn' => 1234567890,
                'term' => $term,
                'major' => $major,
                'family' => $this->getFamily(),
            ],
            [
                'isbn' => 1234567890,
                'term' => $term,
                'major' => $major,
                'family' => $this->getFamily(false),
            ],
            [
                'isbn' => 1234567890,
                'term' => null,
                'major' => $major,
                'family' => $this->getFamily(false),
            ],
        ];
    }


    /**
     * @expectedException \Exception
     */
    public function testGetProductsByIsbnWithException()
    {
        $term = new NebookTerm;
        $resultWrapper = new DataHelper($term);
        $resultWrapper->id = 2;

        $major = new UserMajor();
        $major->setName('Test name');

        $client = $this->createMock(Client::class);
        $client
            ->expects($this->once())
            ->method('productFamilyGetByIsbn')
            ->will($this->throwException(new \Exception()));

        $service = $this->getMockBuilder(BookManager::class)
            ->setConstructorArgs([$client, $this->settings])
            ->setMethods(['getTerm'])
            ->getMock();

        $service
            ->expects($this->once())
            ->method('getTerm')
            ->willReturn($term);

        /** @var BookManager $service */
        $service->getProductsByIsbn(1234567890, $major);
    }


    /**
     * @param bool $withProduct
     * @return NebookFamily
     */
    protected function getFamily($withProduct = true) : NebookFamily
    {
        $products = [];

        if ($withProduct) {
            $product = new NebookProduct();
            $resultWrapper = new DataHelper($product);
            $resultWrapper->sku = 'sku';
            $resultWrapper->upc = 'upc';
            $resultWrapper->backofficeId = 'backofficeId';
            $resultWrapper->price = 100;
            $resultWrapper->listPrice = 100;

            $products[] = $product;
        }

        $family = new NebookFamily();
        $resultWrapper = new DataHelper($family);
        $resultWrapper->id = 1;
        $resultWrapper->backofficeId = 'backofficeId';
        $resultWrapper->type = 'type';
        $resultWrapper->name = 'name';
        $resultWrapper->description = 'description';
        $resultWrapper->imageFileName = 'imageFileName';
        $resultWrapper->imageThumbnailName = 'imageThumbnailName';
        $resultWrapper->imageThumbnailName = 'imageThumbnailName';
        $resultWrapper->products = $products;

        return $family;
    }

    /**
     * @param CampaignBook $book
     * @return EventDispatcher
     */
    protected function getDispatcher(CampaignBook $book) : EventDispatcher
    {
        $dispatcher = $this->createMock(EventDispatcher::class);
        $dispatcher
            ->expects($this->once())
            ->method('dispatch')
            ->with($this->equalTo(BookEvent::BOOK_FAILED), $this->equalTo(new BookEvent($book)));

        return $dispatcher;
    }
}
