<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace DwollaSwagger;

class TokensApi {

  function __construct($apiClient = null) {
    if (null === $apiClient) {
      if (Configuration::$apiClient === null) {
        Configuration::$apiClient = new ApiClient(); // create a new API client if not present
        $this->apiClient = Configuration::$apiClient;
      }
      else
        $this->apiClient = Configuration::$apiClient; // use the default one
    } else {
      $this->apiClient = $apiClient; // use the one provided by the user
    }

  }

  private $apiClient; // instance of the ApiClient

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
/**
   * clientTokens
   *
   * Create a client side token for a customer.
   *
   * @param ClientTokenRequest $body Client Token request. (required)
   * @return ClientToken
   */
  public function clientTokens($body, $headers = null) {


    // parse inputs
    $resourcePath = "/client-tokens";
    $resourcePath = str_replace("{format}", "json", $resourcePath);
    $method = "POST";
    $httpBody = '';
    $queryParams = array();
    $headerParams = array();
    $formParams = array();
    $_header_accept = $this->apiClient->selectHeaderAccept(array('application/vnd.dwolla.v1.hal+json'));
    if (!is_null($_header_accept)) {
      $headerParams['Accept'] = $_header_accept;
    }
    $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/vnd.dwolla.v1.hal+json'));

    if (!is_null($headers)){
      $headerParams = array_merge($headerParams, $headers);
    }




    // body params
    $_tempBody = null;
    if (isset($body)) {
      $_tempBody = $body;
    }

    // for model (json/xml)
    if (isset($_tempBody)) {
      $httpBody = $_tempBody; // $_tempBody is the method argument, if present
    } else if (count($formParams) > 0) {
      // for HTTP post (form)
      $httpBody = $formParams;
    }

    $authSettings = array('oauth2');

    // make the API Call
    $response = $this->apiClient->callAPI($resourcePath, $method,
                                          $queryParams, $httpBody,
                                          $headerParams, $authSettings);

    if(!$response[1]) {
      return null;
    }

    return $response[0] == 201 ? $response[1] : $this->apiClient->deserialize($response[1],'ClientToken');
}
  
  /**
   * oauth
   *
   * OAuth get token response
   *
   * @return OAuthResponse
   */
   public function token() {
      

      // parse inputs
      $resourcePath = "/token";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

      
      // form params
      $grant_type = 'client_credentials';
      $formParams['grant_type'] = $this->apiClient->toFormValue($grant_type);
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // this endpoint requires HTTP basic authentication
      $authSettings = array('basicAuth');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(!$response[1]) {
        return null;
      }

      return $response[0] == 201 ? $response[1] : $this->apiClient->deserialize($response[1],'OAuthResponse');
  }
  

}