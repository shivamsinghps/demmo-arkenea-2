stages:
    - build
    - deploy
    - production:relese
    - production

.job_template: &script_deploy
    script:
        - IMAGE=${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - echo $IMAGE
        - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${TASK_DEFINITION_NAME}")
        - "ENV_VARS=$(jq -n env | jq --arg REGEX ^${CI_JOB_NAME}_* 'with_entries(select(.key|test($REGEX)))' | jq --arg REGEX ^${CI_JOB_NAME}_ ' with_entries(.key |= sub($REGEX; \"\"))' | jq to_entries | jq 'map({name: .key, value:.value})')"
        - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions')
        - NEW_CONTAINER_DEFINITION=$(echo $NEW_CONTAINER_DEFINITION | jq --argjson ENV_VARS "$ENV_VARS" '.[0].environment = $ENV_VARS')
        - "NEW_CONTAINER_DEFINITION=$(echo $NEW_CONTAINER_DEFINITION | jq '.[1].image=.[0].image | .[1].environment=.[0].environment | .[1].name=.[0].name+\"-cron\" | .[1]=.[1] + {entryPoint:[\"/bin/sh\",\"-c\",\"php phing.phar deploy -verbose && cron -f\"]} | .[1]=.[1] + {healthCheck:{retries:5, command: [\"CMD-SHELL\", \"/etc/init.d/cron status || exit 1\"], timeout:10, interval: 30, startPeriod: 60}} | .[1].logConfiguration=.[0].logConfiguration | .[1].logConfiguration.options.\"awslogs-group\"=.[1].logConfiguration.options.\"awslogs-group\"+\"-cron\" | .[1].memoryReservation=256 | .[1].cpu=256 | .')"
        - echo "Registering new container definition..."
        - aws ecs register-task-definition --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINITION}"
        - echo "Updating the service..."
        - aws ecs update-service --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"

build:
    stage: build
    before_script:
        - apk add --no-cache curl jq py-pip
        - pip install awscli
        - $(aws ecr get-login --no-include-email)
    script:
        - echo -e "BuildID:\t${CI_JOB_ID}" > web/build.txt
        - echo -e "Version:\t${CI_COMMIT_REF_NAME}" >> web/build.txt
        - echo -e "$(date)\n\n" >> web/build.txt
        - docker build --build-arg CI_JOB_ID=${CI_JOB_ID} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} -t fmt .
        - docker tag fmt:latest ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker push ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker rmi ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker rmi fmt:latest
    tags:
        - docker
    only:
        refs:
            - /^v\d+.\d+.\d+$/

DEV:
    stage: deploy
    image: python:latest
    before_script:
        - pip install awscli
        - apt-get update && apt-get install -y jq
        - printenv
    variables:
        TASK_DEFINITION_NAME: $DEV_TASK_DEFINITION_NAME
        SERVICE_NAME: $DEV_SERVICE_NAME
    <<: *script_deploy
    when: manual
    only:
        refs:
            - /^v\d+.\d+.\d+$/
    environment:
        name: DEV
    tags:
        - awscli

QA:
    stage: deploy
    image: python:latest
    before_script:
        - pip install awscli
        - apt-get update && apt-get install -y jq
        - printenv
    variables:
        TASK_DEFINITION_NAME: $QA_TASK_DEFINITION_NAME
        SERVICE_NAME: $QA_SERVICE_NAME
    <<: *script_deploy
    when: manual
    only:
        refs:
            - /^v\d+.\d+.\d+$/
    environment:
        name: QA
    tags:
        - awscli

STG:
    stage: deploy
    image: python:latest
    before_script:
        - pip install awscli
        - apt-get update && apt-get install -y jq
        - printenv
    variables:
        TASK_DEFINITION_NAME: $STG_TASK_DEFINITION_NAME
        SERVICE_NAME: $STG_SERVICE_NAME
    <<: *script_deploy
    when: manual
    only:
        refs:
            - /^v\d+.\d+.\d+$/
    environment:
        name: STG
    tags:
        - awscli

PROD:RELEASE:
    stage: production:relese
    before_script:
        - apk add --no-cache curl jq py-pip
        - pip install awscli
    script:
        - $(aws ecr get-login --no-include-email)
        - docker pull ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker tag ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME} ${RELEASE_CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - export AWS_ACCESS_KEY_ID=$RELEASE_AWS_ACCESS_KEY_ID
        - export AWS_SECRET_ACCESS_KEY=$RELEASE_AWS_SECRET_ACCESS_KEY
        - export AWS_DEFAULT_REGION=$RELEASE_AWS_DEFAULT_REGION
        - $(aws ecr get-login --no-include-email)
        - docker push ${RELEASE_CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker rmi ${CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
        - docker rmi ${RELEASE_CONTAINER_REGISTRY}:${CI_COMMIT_REF_NAME}
    needs:
        - build
    only:
        refs:
            - /^v\d+.\d+.\d+$/
    when: manual
    environment:
        name: PROD_RELEASE
    tags:
        - awscli

PROD:
    stage: production
    image: python:latest
    before_script:
        - pip install awscli
        - apt-get update && apt-get install -y jq
        - printenv
    variables:
        TASK_DEFINTION_NAME: $TASK_DEFINTION_NAME
        SERVICE_NAME: $SERVICE_NAME
    <<: *script_deploy
    when: manual
    needs:
        - PROD:RELEASE
    only:
        refs:
            - /^v\d+.\d+.\d+$/
    environment:
        name: PROD
    tags:
        - awscli
